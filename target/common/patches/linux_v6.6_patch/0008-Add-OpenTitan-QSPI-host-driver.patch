From c3d9f8d6bcd7244a955ea57c9ae3dbd195b0f91d Mon Sep 17 00:00:00 2001
From: Christopher Reinwardt <creinwar@ethz.ch>
Date: Mon, 2 Jan 2023 22:48:47 +0100
Subject: [PATCH] Add OpenTitan QSPI host driver

---
 drivers/spi/Kconfig         |   5 +
 drivers/spi/Makefile        |   1 +
 drivers/spi/spi-opentitan.c | 757 ++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 763 insertions(+)
 create mode 100644 drivers/spi/spi-opentitan.c

diff --git a/drivers/spi/Kconfig b/drivers/spi/Kconfig
index aadaea052f51..abd15f4be5c7 100644
--- a/drivers/spi/Kconfig
+++ b/drivers/spi/Kconfig
@@ -565,6 +565,11 @@ config SPI_OMAP24XX
 	  SPI master controller for OMAP24XX and later Multichannel SPI
 	  (McSPI) modules.
 
+config SPI_OPENTITAN_QSPI
+    tristate "OpenTitan SPI Host driver"
+    help
+      SPI host controller for the OpenTitan QSPI host
+
 config SPI_TI_QSPI
 	tristate "DRA7xxx QSPI controller support"
 	depends on ARCH_OMAP2PLUS || COMPILE_TEST
diff --git a/drivers/spi/Makefile b/drivers/spi/Makefile
index 6fea5821662e..4e780ab642d3 100644
--- a/drivers/spi/Makefile
+++ b/drivers/spi/Makefile
@@ -80,6 +80,7 @@ obj-$(CONFIG_SPI_OCTEON)		+= spi-octeon.o
 obj-$(CONFIG_SPI_OMAP_UWIRE)		+= spi-omap-uwire.o
 obj-$(CONFIG_SPI_OMAP_100K)		+= spi-omap-100k.o
 obj-$(CONFIG_SPI_OMAP24XX)		+= spi-omap2-mcspi.o
+obj-$(CONFIG_SPI_OPENTITAN_QSPI)	+= spi-opentitan.o
 obj-$(CONFIG_SPI_TI_QSPI)		+= spi-ti-qspi.o
 obj-$(CONFIG_SPI_ORION)			+= spi-orion.o
 obj-$(CONFIG_SPI_PIC32)			+= spi-pic32.o
diff --git a/drivers/spi/spi-opentitan.c b/drivers/spi/spi-opentitan.c
new file mode 100644
index 000000000000..6e613f65fdf2
--- /dev/null
+++ b/drivers/spi/spi-opentitan.c
@@ -0,0 +1,757 @@
+#include <linux/io.h>
+#include <linux/interrupt.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/spi/spi.h>
+
+#define MIN(a,b) ((a <= b) ? a : b)
+
+#define OPENTITAN_QSPI_DRIVER_NAME		"opentitan_qspi"
+
+// Bit 30 in Control: SW Reset
+#define OPENTITAN_QSPI_CONTROL_SPI_EN (1 << 31)
+#define OPENTITAN_QSPI_CONTROL_SW_RESET (1 << 30)
+#define OPENTITAN_QSPI_CONTROL_OUTPUT_EN (1 << 29)
+
+#define OPENTITAN_QSPI_TXFIFO_DEPTH 256
+#define OPENTITAN_QSPI_RXFIFO_DEPTH 256
+#define OPENTITAN_QSPI_FIFO_DEPTH MIN(OPENTITAN_QSPI_TXFIFO_DEPTH, OPENTITAN_QSPI_RXFIFO_DEPTH)
+
+#define OPENTITAN_QSPI_READY_TIMEOUT 10000
+#define OPENTITAN_QSPI_READ_TIMEOUT 10000
+
+// 5 us divided by 8 bits and inverted to be in integer range
+#define OPENTITAN_QSPI_IRQ_THRESHOLD 16000000
+
+#define OPENTITAN_QSPI_IP_EVENT 2
+#define OPENTITAN_QSPI_IP_ERROR 1
+
+#define SPI_XFER_BEGIN 1
+#define SPI_XFER_END 2
+
+/* opentitan qspi register set */
+enum opentitan_qspi_regs {
+	REG_INTR_STATE,		/* Interrupt State Register */
+	REG_INTR_ENABLE,	/* Interrupt Enable Register */
+	REG_INTR_TEST,		/* Interrupt Test Register */
+	REG_ALERT_TEST,		/* Alert Test Register */
+	REG_CONTROL,		/* Control Register */
+	REG_STATUS,			/* Status Register */
+	REG_CONFIGOPTS_0,	/* Configuration Options Register 1 */
+	REG_CONFIGOPTS_1,   /* Configuration Options Register 2 */
+	REG_CONFIGOPTS_2,   /* Configuration Options Register 3 */
+	REG_CSID,			/* Chip-Select ID */
+	REG_COMMAND,		/* Command Register */
+	REG_RXDATA,         /* SPI RX Data Window*/
+	REG_TXDATA,         /* SPI TX Data Window*/
+	REG_ERROR_ENABLE,	/* Controls which classes of error raise an interrupt */
+	REG_ERROR_STATUS,	/* Indicates that any errors have occured */
+	REG_EVENT_ENABLE,	/* Controls which classes of SPI events raise an interrupt */
+};
+
+/* opentitan qspi priv */
+struct opentitan_qspi_priv {
+	struct completion done;     /* wake-up from interrupt */
+	unsigned int __iomem *regs;
+  	unsigned int clk_freq; 		/* Peripheral clock frequency */
+	unsigned int max_freq; 		/* Max supported SPI frequency */
+	unsigned int cur_freq;		/* Current SPI clock frequency */
+	unsigned int cs_state; 		/* 0 = CS currently not asserted, 1 = CS currently asserted */
+	unsigned int used_cs;		/* Which CS shall be used for the current transfer */
+	unsigned int unused_cs;		/* Which CS should be used for de-selecting the target */
+	unsigned char byte_order; 	/* 1 = LSB shifted in/out first, 0 = MSB shifted in/out first */
+};
+
+
+static int opentitan_qspi_issue_dummy(struct spi_master *master, unsigned int bitlen, unsigned long flags)
+{
+	struct opentitan_qspi_priv *priv = spi_master_get_devdata(master);
+	unsigned char csaat 	= !(flags & SPI_XFER_END) && (priv->cs_state || flags & SPI_XFER_BEGIN);
+   	// Wait for the SPI host to be ready
+   	unsigned int ready_timeout = OPENTITAN_QSPI_READY_TIMEOUT;
+   	unsigned int status = 0;
+    unsigned int command = 0;
+
+	if(flags & SPI_XFER_BEGIN){
+		priv->cs_state = 1;
+		iowrite32(priv->used_cs, priv->regs + REG_CSID);
+	}
+
+	// Just setting the CS
+	if(bitlen == 0){
+		if(flags & SPI_XFER_END){
+			priv->cs_state = 0;
+			iowrite32(priv->unused_cs, priv->regs + REG_CSID);
+			opentitan_qspi_issue_dummy(master, 8, 0);
+		}
+		return 0;
+	}
+
+    do {
+    	status = ioread32((volatile unsigned int *) (priv->regs + REG_STATUS));
+       	ready_timeout--;
+    } while(!(status >> 31) && ready_timeout > 0);
+
+    if(ready_timeout == 0 && !(status >> 31)){
+       	dev_err(&master->dev, "opentitan_qspi_issue_dummy: Ready did not assert. Status: 0x%x\r\n", status);
+       	return -1;
+    }
+
+	command = ((bitlen & 0x1FF) - 1) | ((csaat & 0x1) << 9);
+	iowrite32(command, priv->regs + REG_COMMAND);
+
+	do {
+		status = ioread32(priv->regs + REG_STATUS);
+	} while((status >> 30) & 0x1);
+
+	if(flags & SPI_XFER_END){
+		priv->cs_state = 0;
+		iowrite32(priv->unused_cs, priv->regs + REG_CSID);
+	}
+
+	return 0;
+}
+
+// Expects the FIFOs to be empty and returns once the FIFOs are empty again
+static int opentitan_qspi_xfer_single(struct spi_master *master, unsigned int bitlen,
+				      const void *dout, void *din, unsigned long flags)
+{
+	struct opentitan_qspi_priv *priv = spi_master_get_devdata(master);
+	unsigned int num_bytes 	= bitlen/8;
+	unsigned int command = 0;
+    unsigned int status  = 0;
+    unsigned int ready_timeout = OPENTITAN_QSPI_READY_TIMEOUT;
+	unsigned char csaat 	= !(flags & SPI_XFER_END) && (priv->cs_state || flags & SPI_XFER_BEGIN);
+	unsigned char dir   	= (din != NULL) | ((dout != NULL) << 1);
+
+    if(!dout && !din)
+		return opentitan_qspi_issue_dummy(master, bitlen, flags);
+
+	if(bitlen % 8 != 0){
+		dev_err(&master->dev, "Transfers must be multiples of 8 bit long\n");
+		return -EINVAL;
+	}
+	
+	if(flags & SPI_XFER_BEGIN){
+		priv->cs_state = 1;
+		iowrite32(priv->used_cs, priv->regs + REG_CSID);
+	}
+
+	// Just setting the CS
+	if(bitlen == 0){
+		if(flags & SPI_XFER_END){
+			priv->cs_state = 0;
+			iowrite32(priv->unused_cs, priv->regs + REG_CSID);
+			opentitan_qspi_issue_dummy(master, 8, 0);
+		}
+		return 0;
+	}
+		
+	if(dir >> 1){
+	    unsigned int i = 0;
+		// Take care of the word aligned part
+		for(; i < num_bytes/4; i++){
+			unsigned char tmp[4];
+
+			if(!priv->byte_order){
+				tmp[3] = ((unsigned char *) dout)[4*i];
+				tmp[2] = ((unsigned char *) dout)[4*i + 1];
+				tmp[1] = ((unsigned char *) dout)[4*i + 2];
+				tmp[0] = ((unsigned char *) dout)[4*i + 3];
+			} else {
+				// Read from dout according to its alignment
+               	// 4 byte
+                if(!((long int) dout & 0x3L)){
+                	*((unsigned int *) tmp) = *((unsigned int *) (dout+4*i));
+ 
+                // 2 byte
+                } else if (!((long int) dout & 0x1L)){
+                	*((unsigned short *) tmp)     = *((unsigned short *) (dout+4*i));
+                	*((unsigned short *) (tmp+2)) = *((unsigned short *) (dout+4*i+2));
+ 
+                // 1 byte
+                } else {
+                	tmp[0] = ((unsigned char *) dout)[4*i];
+                	tmp[1] = ((unsigned char *) dout)[4*i + 1];
+                	tmp[2] = ((unsigned char *) dout)[4*i + 2];
+                	tmp[3] = ((unsigned char *) dout)[4*i + 3];
+                }
+			}
+
+			iowrite32(*((unsigned int *) tmp), priv->regs + REG_TXDATA);
+		}
+
+		// Less than a full word left
+		if(i*4 < num_bytes){
+			unsigned char tmp[4];
+
+			if(!priv->byte_order){
+				// We are in here so at least one byte remains
+				tmp[3] = ((unsigned char *) dout)[i*4];
+				tmp[2] = ((num_bytes - i*4) >= 2) ? ((unsigned char *) dout)[i*4 + 1] : 0;
+				tmp[1] = ((num_bytes - i*4) == 3) ? ((unsigned char *) dout)[i*4 + 2] : 0;
+			
+				// Cannot need filling as it would have been taken care of by the loop then
+				tmp[0] = 0;
+			} else {
+				// We are in here so at least one byte remains
+				tmp[0] = ((unsigned char *) dout)[i*4];
+				tmp[1] = ((num_bytes - i*4) >= 2) ? ((unsigned char *) dout)[i*4 + 1] : 0;
+				tmp[2] = ((num_bytes - i*4) == 3) ? ((unsigned char *) dout)[i*4 + 2] : 0;
+			
+				// Cannot need filling as it would have been taken care of by the loop then
+				tmp[3] = 0;
+			}
+			
+			iowrite32(*((unsigned int *) tmp), priv->regs + REG_TXDATA);
+		}
+	}
+
+	// Set the correct transfer mode
+	command = ((num_bytes & 0x1FF) - 1) | ((csaat & 0x1) << 9) | (dir << 12);
+
+    // Wait for the SPI host to be ready
+    do {
+       	status = ioread32((volatile unsigned int *) (priv->regs + REG_STATUS));
+       	ready_timeout--;
+    } while(!(status >> 31) && ready_timeout > 0);
+
+    if(ready_timeout == 0 && !(status >> 31)){
+       	dev_err(&master->dev, "opentitan_qspi_xfer_single: Ready did not assert. Status: 0x%x\r\n", status);
+       	return -1;
+    }
+
+	// Enable the interrupt to wait for completion of the transfer
+	if((num_bytes > 1) && ((priv->cur_freq/num_bytes) <= OPENTITAN_QSPI_IRQ_THRESHOLD)){
+		reinit_completion(&priv->done);
+
+		// Disable event interrupts
+		iowrite32(0x1, priv->regs + REG_INTR_ENABLE);
+
+		// Enable idle event
+		iowrite32(0x20, priv->regs + REG_EVENT_ENABLE);
+
+		// Re-enable event interrupts
+		iowrite32(0x3, priv->regs + REG_INTR_ENABLE);
+	}
+
+	// Start transaction by writing to the command register
+	iowrite32(command, priv->regs + REG_COMMAND);
+
+	if((num_bytes > 1) && ((priv->cur_freq/num_bytes) <= OPENTITAN_QSPI_IRQ_THRESHOLD)){
+		wait_for_completion(&priv->done);
+	}
+
+	// Wait for the FIFOs to be empty (full) if we had an actual data transfer
+	if(dir > 0){
+		status = 0;
+
+		// RX only or RX/TX
+		if(dir == 1 || dir == 3) {
+			unsigned int bytes_rcvd = 0;
+			do {
+				status = ioread32((volatile unsigned int *) (priv->regs + REG_STATUS));
+
+				if((status >> 8) & 0xFF){
+					if(bytes_rcvd < num_bytes){
+						unsigned char *dst = (unsigned char *) din;
+						unsigned int word = ioread32(priv->regs + REG_RXDATA);
+
+						if((num_bytes - bytes_rcvd) >= 4){
+							if(!priv->byte_order){
+								dst[3] =  word        & 0xFF;
+								dst[2] = (word >>  8) & 0xFF;
+								dst[1] = (word >> 16) & 0xFF;
+								dst[0] = (word >> 24) & 0xFF;
+							} else {
+								// Store received data into din according to it's alignment
+                            	// 4 byte
+                                if(!((long int) din & 0x3L)){
+                                	*((unsigned int *) din) = word;
+ 
+                                // 2 byte
+                                } else if (!((long int) din & 0x1L)) {
+                                	*((unsigned short *) din)   =  word        & 0xFFFF;
+                                	*((unsigned short *) din+2) = (word >> 16) & 0xFFFF;
+ 
+                                // 1 byte
+                                } else {
+                                	dst[0] =  word        & 0xFF;
+                                	dst[1] = (word >>  8) & 0xFF;
+                                	dst[2] = (word >> 16) & 0xFF;
+                                	dst[3] = (word >> 24) & 0xFF;
+                                }
+							}
+
+							din += 4;
+							bytes_rcvd += 4;
+						} else {
+							if(!priv->byte_order){
+								// We are in here so at least one byte remains
+								dst[0] = (word >> 24) & 0xFF;
+								bytes_rcvd++;
+
+								if((num_bytes - bytes_rcvd) >= 1){
+									dst[1] = (word >> 16) & 0xFF;
+									bytes_rcvd++;
+								}
+
+								if((num_bytes - bytes_rcvd) == 1){
+									dst[2] = (word >> 8) & 0xFF;
+									bytes_rcvd++;
+								}
+
+							} else {
+								// We are in here so at least one byte remains
+								dst[0] = word & 0xFF;
+                                bytes_rcvd++;
+
+								if((num_bytes - bytes_rcvd) >= 1){
+									dst[1] = (word >> 8) & 0xFF;
+									bytes_rcvd++;
+								}
+
+								if((num_bytes - bytes_rcvd) == 1){
+									dst[2] = (word >> 16) & 0xFF;
+									bytes_rcvd++;
+								}
+							}
+						}
+
+					// Somehow we have too much data??
+					} else {
+						(void) ioread32(priv->regs + REG_RXDATA);
+						dev_err(&master->dev, "Device returned more data than we requested. num_bytes = 0x%x, bytes_rcvd = 0x%x, status = 0x%x\n",
+								num_bytes, bytes_rcvd, status);
+					}
+				}
+			} while(((status >> 8) & 0xFF) || ((status >> 30) & 0x1));
+
+            // Wait for the last bytes of the transfer
+			if(bytes_rcvd < num_bytes){
+                unsigned int read_timeout = OPENTITAN_QSPI_READ_TIMEOUT;
+                unsigned int word;
+				unsigned char *dst = (unsigned char *) din;
+
+                do {
+                	status = ioread32((volatile unsigned int *) (priv->regs + REG_STATUS));
+                	read_timeout--;
+				} while(!((status >> 8) & 0xFF) && read_timeout > 0);
+
+                if(read_timeout == 0 && !((status >> 8) & 0xFF)){
+                	dev_err(&master->dev, "RX queue did not notify us about the last bytes\r\n");
+                	return -1;
+                }
+        
+				word = ioread32((volatile unsigned int *) (priv->regs + REG_RXDATA));
+
+				if(!priv->byte_order){
+					// We are in here so at least one byte remains
+					dst[0] = (word >> 24) & 0xFF;
+					bytes_rcvd++;
+
+					if((num_bytes - bytes_rcvd) >= 1){
+						dst[1] = (word >> 16) & 0xFF;
+						bytes_rcvd++;
+					}
+
+					if((num_bytes - bytes_rcvd) >= 1){
+						dst[2] = (word >> 8) & 0xFF;
+						bytes_rcvd++;
+					}
+
+					if((num_bytes - bytes_rcvd) == 1){
+                        dst[3] = word & 0xFF;
+						bytes_rcvd++;
+					}
+
+				} else {
+					// We are in here so at least one byte remains
+					dst[0] = word & 0xFF;
+                    			bytes_rcvd++;
+
+					if((num_bytes - bytes_rcvd) >= 1){
+						dst[1] = (word >> 8) & 0xFF;
+						bytes_rcvd++;
+					}
+
+					if((num_bytes - bytes_rcvd) >= 1){
+						dst[2] = (word >> 16) & 0xFF;
+						bytes_rcvd++;
+					}
+
+					if((num_bytes - bytes_rcvd) == 1){
+                        dst[3] = (word >> 24) & 0xFF;
+						bytes_rcvd++;
+					}
+				}
+			}
+
+		// TX Only
+		} else if(dir == 2) {
+			// Wait for SPI host do go idle
+			do {
+				status = ioread32(priv->regs + REG_STATUS);
+			} while((status >> 30) & 0x1);
+ 		
+		// What mode is this??
+		} else {
+			dev_err(&master->dev, "This direction is unknown: %d\n", dir);
+			return -EINVAL;
+		}
+	}
+
+	if(flags & SPI_XFER_END){
+		priv->cs_state = 0;
+		iowrite32(priv->unused_cs, priv->regs + REG_CSID);
+	}
+
+	return 0;
+}
+
+static int opentitan_qspi_xfer(struct spi_master *master, unsigned int bitlen,
+			       const void *dout, void *din, unsigned long flags)
+{
+    //dev_info(&master->dev, "opentitan_qspi_xfer: bitlen = 0x%x, dout = 0x%x, din = 0x%x, flags = %lu\r\n",
+    //         bitlen, (unsigned int) dout, (unsigned int) din, flags);
+
+	// Yay a single transaction
+	if(bitlen <= OPENTITAN_QSPI_FIFO_DEPTH*8){
+		return opentitan_qspi_xfer_single(master, bitlen, dout, din, flags);
+
+	// Aww multiple transactions
+	} else {
+		unsigned long first_flags = flags & SPI_XFER_BEGIN;
+		unsigned long last_flags  = flags & SPI_XFER_END;
+		unsigned int  num_txns    = (bitlen + OPENTITAN_QSPI_FIFO_DEPTH*8 - 1)/(OPENTITAN_QSPI_FIFO_DEPTH*8);
+        unsigned int i;
+		
+		for(i = 0; i < num_txns; i++){
+			unsigned long flags = (i == 0) ? first_flags :
+					      		  (i == num_txns-1) ? last_flags  : 0;
+			unsigned int ret = 0;
+			unsigned int len = ((bitlen - i*OPENTITAN_QSPI_FIFO_DEPTH*8) < OPENTITAN_QSPI_FIFO_DEPTH*8) ?
+					    		(bitlen - i*OPENTITAN_QSPI_FIFO_DEPTH*8) : OPENTITAN_QSPI_FIFO_DEPTH*8;
+			void const *out = NULL;
+			void *in  = NULL;
+
+			if(dout)
+				out = (void *) (dout + i*OPENTITAN_QSPI_FIFO_DEPTH);
+
+			if(din)
+				in  = (void *) (din + i*OPENTITAN_QSPI_FIFO_DEPTH);
+
+			ret = opentitan_qspi_xfer_single(master, len, out, in, flags);
+			
+			if(ret)
+				return ret;
+		}
+
+		return 0;
+	}
+}
+
+static int opentitan_qspi_set_speed(struct spi_master *master, uint speed)
+{
+	unsigned long int clkdiv = 0;
+	u32 configopts = 0;
+	struct opentitan_qspi_priv *priv = spi_master_get_devdata(master);
+
+	if(speed > priv->max_freq){
+		dev_info(&master->dev, "Requested frequency is higher than maximum possible frequency!\n");
+		dev_info(&master->dev, "Req: %d, Max: %d\n", speed, priv->max_freq);
+		speed = priv->max_freq;
+	}
+
+	priv->cur_freq = speed;
+
+	// SPI_CLK = SYS_CLK/(2*(clkdiv+1))
+	// clkdiv = SYS_CLK/(2*SPI_CLK) - 1
+	clkdiv = priv->clk_freq + 2*speed - 1L;
+	clkdiv = clkdiv/(2*speed) - 1L;
+
+	if(clkdiv != (clkdiv & (~(-1 << 16)))){
+		dev_info(&master->dev, "Calculated clock divider overflows the hardware register! Using maximum value\n");
+		clkdiv = ~(-1 << 16);
+	}
+
+	configopts = (u32) ioread32(priv->regs + REG_CONFIGOPTS_0 + priv->used_cs);
+	configopts = (configopts & (-1 << 16)) | (clkdiv & ~(-1 << 16));
+	iowrite32(configopts, priv->regs + REG_CONFIGOPTS_0 + priv->used_cs);
+
+	// This is dirty... we are wasting a whole chip select just to be able to control the chipselect
+	// independently of the rest of the SPI bus
+	iowrite32(configopts, priv->regs + REG_CONFIGOPTS_0 + priv->unused_cs);
+
+	return 0;
+}
+
+static int opentitan_qspi_set_mode(struct spi_master *master, uint mode)
+{
+	struct opentitan_qspi_priv *priv = spi_master_get_devdata(master);
+	unsigned int configopts = 0;
+
+	configopts = (unsigned int) ioread32(priv->regs + REG_CONFIGOPTS_0 + priv->used_cs);
+	configopts = (configopts & 0xFFFF) | (0xFFF << 16) | ((mode & 0x3) << 30);
+	iowrite32(configopts, priv->regs + REG_CONFIGOPTS_0 + priv->used_cs);
+	iowrite32(configopts, priv->regs + REG_CONFIGOPTS_0 + priv->unused_cs);
+
+	return 0;
+}
+
+static irqreturn_t opentitan_qspi_irq(int irq, void *dev_id)
+{
+	struct opentitan_qspi_priv *priv = (struct opentitan_qspi_priv *) dev_id;
+	unsigned int ie = 0;
+	unsigned int ip = ioread32(priv->regs + REG_INTR_STATE);
+	unsigned int status = ioread32(priv->regs + REG_STATUS);
+
+	if (ip & OPENTITAN_QSPI_IP_EVENT){
+		if(!((status >> 30) & 0x1)){
+			unsigned int intr_enable = ioread32(priv->regs + REG_INTR_ENABLE);
+
+			// Disable event interrupts
+			iowrite32(intr_enable & 0x1, priv->regs + REG_INTR_ENABLE);
+
+			// Disable all events
+			iowrite32(0x0, priv->regs + REG_EVENT_ENABLE);
+
+			// Clear event interrupt flag
+			iowrite32(0x2, priv->regs + REG_INTR_STATE);
+
+			complete(&priv->done);
+			return IRQ_HANDLED;
+		}
+	} else if (ip & OPENTITAN_QSPI_IP_ERROR) {
+		unsigned int err_status = ioread32(priv->regs + REG_ERROR_STATUS);
+
+		dev_err(NULL, "opentitan_qspi: error interrupt! error_status = 0x%x\r\n", err_status);
+		
+		// Badly handle the error by just clearing the flags
+		iowrite32(0x1F, priv->regs + REG_ERROR_STATUS);
+		iowrite32(0x1, priv->regs + REG_INTR_STATE);
+
+		complete(&priv->done);
+		return IRQ_HANDLED;
+	}
+	return IRQ_NONE;
+}
+
+static int opentitan_qspi_prepare_message(struct spi_master *master, struct spi_message *msg)
+{
+	struct opentitan_qspi_priv *priv = spi_master_get_devdata(master);
+	struct spi_device *device = msg->spi;
+
+	// Select correct chip select
+	priv->used_cs = device->chip_select;
+
+	if (device->mode & SPI_CS_HIGH)
+		dev_err(&master->dev, "SPI_CS_HIGH requested!\r\n");
+
+	// Set the correct mode
+	return opentitan_qspi_set_mode(master, device->mode & 0x3);
+}
+
+static void opentitan_qspi_set_cs(struct spi_device *device, bool is_high)
+{
+	struct opentitan_qspi_priv *priv = spi_master_get_devdata(device->master);
+
+	// is_high is the logic level of the CS
+	if(!is_high) {
+		priv->cs_state = 1;
+		iowrite32(priv->used_cs, priv->regs + REG_CSID);
+	} else {
+		priv->cs_state = 0;
+		iowrite32(priv->unused_cs, priv->regs + REG_CSID);
+		opentitan_qspi_issue_dummy(device->master, 8, 0);
+	}
+}
+
+static int opentitan_qspi_transfer_one(struct spi_master *master, struct spi_device *device,
+									   struct spi_transfer *t)
+{
+	struct opentitan_qspi_priv *priv = spi_master_get_devdata(master);
+
+	/* Set the speed according to the transfer or use the last speed */
+	if (t->speed_hz){
+		opentitan_qspi_set_speed(master, t->speed_hz);
+		priv->cur_freq = t->speed_hz;
+	} else {
+		opentitan_qspi_set_speed(master, priv->cur_freq);
+	}
+	
+	return opentitan_qspi_xfer(master, t->len*8, t->tx_buf, t->rx_buf, 0);
+}
+
+static int opentitan_qspi_probe(struct platform_device *pdev)
+{
+    struct opentitan_qspi_priv *priv;
+	struct spi_master *master;
+	u32 status = 0, loop_count = 0, ret = 0, err_irq = 0, evt_irq = 0;
+
+	master = spi_alloc_master(&pdev->dev, sizeof(struct opentitan_qspi_priv));
+	if (!master) {
+		dev_err(&pdev->dev, "out of memory\r\n");
+		return -ENOMEM;
+	}
+
+	priv = spi_master_get_devdata(master);
+	init_completion(&priv->done);
+	platform_set_drvdata(pdev, master);
+	
+	priv->regs = devm_platform_ioremap_resource(pdev, 0);
+	if (IS_ERR(priv->regs)) {
+		ret = PTR_ERR(priv->regs);
+		goto put_master;
+	}
+
+	// Get the error interrupt
+	err_irq = platform_get_irq(pdev, 0);
+	if (err_irq < 0) {
+		ret = err_irq;
+		goto put_master;
+	}
+
+	// Get the event interrupt
+	evt_irq = platform_get_irq(pdev, 1);
+	if (evt_irq < 0) {
+		ret = evt_irq;
+		goto put_master;
+	}
+
+	ret = of_property_read_u32(pdev->dev.of_node, "clock-frequency",
+	                           &priv->clk_freq);
+	if(ret < 0){
+		dev_err(&pdev->dev, "Unable to determine SPI clock frequency\r\n");
+		goto put_master;
+	}
+
+	ret = of_property_read_u32(pdev->dev.of_node, "max-frequency",
+							   &priv->max_freq);
+	if(ret < 0)
+		priv->max_freq = 400000;	// Default to 400 kHz
+
+	// Use first CS by default
+	priv->unused_cs = 2;
+    priv->used_cs = 0;
+
+	// Read the byte order
+	status = ioread32(priv->regs + REG_STATUS);
+	priv->byte_order = (status >> 22) & 0x1;
+
+	/* Define our master */
+	master->dev.of_node 		= pdev->dev.of_node;
+	master->bus_num 			= pdev->id;
+	master->num_chipselect 		= 1;
+	master->mode_bits 			= SPI_CPHA | SPI_CPOL; // | SPI_CS_HIGH;
+	master->bits_per_word_mask 	= SPI_BPW_MASK(8);
+	master->max_speed_hz		= priv->max_freq;
+	master->flags 				= 0;
+	master->prepare_message		= opentitan_qspi_prepare_message;
+	master->set_cs				= opentitan_qspi_set_cs;
+	master->transfer_one		= opentitan_qspi_transfer_one;
+
+	pdev->dev.dma_mask = NULL; 
+
+	// Disable all interrupts
+	iowrite32(0, priv->regs + REG_INTR_ENABLE);
+	iowrite32(0, priv->regs + REG_EVENT_ENABLE);
+
+	// Assert SW reset of the SPI Host
+	iowrite32(OPENTITAN_QSPI_CONTROL_SW_RESET, priv->regs + REG_CONTROL);
+
+	// Wait until the FIFOs are drained
+	do {
+		status = (int) ioread32(priv->regs + REG_STATUS);
+		loop_count++;
+
+		if(loop_count >= 1000000){
+			iowrite32(0, priv->regs + REG_CONTROL);
+			return -EINVAL;
+		}
+	} while ((status >> 30) & 1 || (status << 16));
+
+	// Deassert SW reset and assert enable signal => Start SPI Host
+	iowrite32((1 << 31), priv->regs + REG_CONTROL);
+
+	// Configure the CS
+	// De-select the connected peripheral by default
+	iowrite32(priv->unused_cs, priv->regs + REG_CSID);
+
+	// Enable the SPI and its output
+  	iowrite32(OPENTITAN_QSPI_CONTROL_OUTPUT_EN  | OPENTITAN_QSPI_CONTROL_SPI_EN, priv->regs + REG_CONTROL);
+
+	/* Register for SPI event interrupt */
+	ret = devm_request_irq(&pdev->dev, evt_irq, opentitan_qspi_irq, 0,
+			       dev_name(&pdev->dev), priv);
+	if (ret) {
+		dev_err(&pdev->dev, "Unable to bind to event interrupt\n");
+		goto put_master;
+	}
+
+	/* Register for SPI error interrupt */
+	ret = devm_request_irq(&pdev->dev, err_irq, opentitan_qspi_irq, 0,
+			       dev_name(&pdev->dev), priv);
+	if (ret) {
+		dev_err(&pdev->dev, "Unable to bind to error interrupt\n");
+		goto put_master;
+	}
+
+	ret = devm_spi_register_master(&pdev->dev, master);
+	if(ret < 0){
+		dev_err(&pdev->dev, "spi_register_master failed\r\n");
+		goto put_master;
+	}
+
+	// Enable all errors and the error interrupt
+	iowrite32(0x1F, priv->regs + REG_ERROR_ENABLE);
+	iowrite32(0x1, priv->regs + REG_INTR_ENABLE);
+
+	dev_info(&pdev->dev, "initialized; err_irq = %d, evt_irq = %d, num cs = %d, byte order = %d\r\n",
+			 err_irq, evt_irq, priv->unused_cs, priv->byte_order);
+    dev_info(&pdev->dev, "Params: regs = 0x%x, clk_freq = %u, max_freq = %u, cs_state = %u\r\n",
+             (unsigned int) priv->regs, priv->clk_freq, priv->max_freq, priv->cs_state);
+    dev_info(&pdev->dev, "Params: used_cs = %u, unused_cs = %u\r\n", priv->used_cs, priv->unused_cs);
+    dev_info(&pdev->dev, "Status reg @ 0x%x: 0x%x\r\n", (unsigned int) (priv->regs + REG_STATUS), ioread32(priv->regs + REG_STATUS));
+
+	return 0;
+
+put_master:
+	spi_master_put(master);
+
+	return ret;
+}
+
+static int opentitan_qspi_remove(struct platform_device *pdev)
+{
+	struct spi_master *master = platform_get_drvdata(pdev);
+	struct opentitan_qspi_priv *priv = spi_master_get_devdata(master);
+
+	// Disable all interrupts
+	iowrite32(0, priv->regs + REG_INTR_ENABLE);
+	iowrite32(0, priv->regs + REG_EVENT_ENABLE);
+	
+	return 0;
+}
+
+static const struct of_device_id opentitan_qspi_of_match[] = {
+	{ .compatible = "opentitan,spi-host" },
+	{ }
+};
+
+MODULE_DEVICE_TABLE(of, opentitan_qspi_of_match);
+
+static struct platform_driver opentitan_qspi_driver = {
+	.probe = opentitan_qspi_probe,
+	.remove = opentitan_qspi_remove,
+	.driver = {
+		.name = OPENTITAN_QSPI_DRIVER_NAME,
+		.of_match_table = opentitan_qspi_of_match
+	},
+};
+module_platform_driver(opentitan_qspi_driver);
+
+MODULE_AUTHOR("PULP Platform <info@pulp-platform.org");
+MODULE_DESCRIPTION("OpenTitan SPI Host driver");
+MODULE_LICENSE("GPL");
-- 
2.16.5

